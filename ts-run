#!/bin/sh

set -e

if ! [ -z "$TS_RUN_DEBUG" ]; then
 set -x
fi

# Attempt to find the location of _this_ script so we can relatively require the
# bootstrap. This is mainly useful for npx.
SCRIPT_PATH=$(cd `dirname ${0}`; pwd)

# create a script to find an absolute path to the bootstrap script
# this file could be in node_modules/.bin/ or in node_modules/@kirbysayshi,
# so we cannot use relative paths.
RESOLVER=$(cat <<-END
const path = require("path");
let p=null;

const root = path.join("${SCRIPT_PATH}");

const paths = [
  // Normal case, in local node_modules
  path.join(root, "./ts-run-bootstrap.js"),

  // npx case: npx creates a bin and lib folder with node_modules inside
  path.join(
    root
      .split(path.sep)
      .map(p => p === "bin" ? "lib" : p)
      .join(path.sep),
    "node_modules",
    "@kirbysayshi",
    "ts-run",
    "ts-run-bootstrap.js"),

  // last chance, try for node_modules somewhere in the tree
  "@kirbysayshi/ts-run/ts-run-bootstrap.js"
];

if (process.env.TS_RUN_DEBUG) {
  console.warn("Trying paths: \n" + paths.join('\n'))
}

for (let i = 0; i < paths.length; i++) {
  try {
    p = require.resolve(paths[i]);
  } catch (e) {}
}

if (!p) throw new Error("Could not resolve ts-run-boostrap.js. Tried: \n" + paths.join("\n"));
p
END
)
# the above ) must be on a new line because `END` must be on a single line
# by itself to interpreted correctly as a HEREDOC

# find the bootstrap path
BOOTSTRAP_PATH=$(node -p "$RESOLVER")

# execute the actual TS
node -r $BOOTSTRAP_PATH "$@"