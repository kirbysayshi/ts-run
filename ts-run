#! /usr/bin/env node

// Find an absolute path to the bootstrap script. This file could be in
// node_modules/.bin/ or in node_modules/@kirbysayshi, so we cannot use relative
// paths.
const path = require('path');
let bootstrapPath = null;

const root = __dirname;

const paths = [
  // Normal case, in local node_modules
  path.join(root, './ts-run-bootstrap.js'),

  // npx case: npx creates a bin and lib folder with node_modules inside
  path.join(
    root
      .split(path.sep)
      .map(p => (p === 'bin' ? 'lib' : p))
      .join(path.sep),
    'node_modules',
    '@kirbysayshi',
    'ts-run',
    'ts-run-bootstrap.js',
  ),

  // last chance, try for node_modules somewhere in the tree
  '@kirbysayshi/ts-run/ts-run-bootstrap.js',
];

if (process.env.TS_RUN_DEBUG) {
  // eslint-disable-next-line no-console
  console.warn(`Trying paths: \n${paths.join('\n')}`);
}

for (let i = 0; i < paths.length; i++) {
  try {
    bootstrapPath = require.resolve(paths[i]);
  } catch (e) {
    //
  }
}

if (!bootstrapPath)
  throw new Error(
    `Could not resolve ts-run-boostrap.js. Tried: \n${paths.join('\n')}`,
  );

// eslint-disable-next-line camelcase
const child_process = require('child_process');

const proc = child_process
  .spawn('node', ['-r', bootstrapPath, ...process.argv.slice(2)], {
    stdio: 'inherit',
  })
  .on('error', code => {
    if (process.env.TS_RUN_DEBUG) {
      // eslint-disable-next-line no-console
      console.warn('error', code);
    }
    process.exit(code);
  })
  .on('close', code => {
    if (process.env.TS_RUN_DEBUG) {
      // eslint-disable-next-line no-console
      console.warn('close', code);
    }
    process.exit(code);
  });

if (!process.env.TS_RUN_NO_ATTEMPT_SIGNAL_FORWARDING) {
  const signals = ['SIGUSR1', 'SIGUSR2', 'SIGINT'];

  if (process.env.TS_RUN_DEBUG) {
    // eslint-disable-next-line no-console
    console.warn('attempting to forward', signals);
  }

  for (const sig of signals) {
    process.on(sig, () => {
      if (process.env.TS_RUN_DEBUG) {
        // eslint-disable-next-line no-console
        console.warn(`Forwarding signal ${sig} to ${proc.pid}`);
      }
      process.kill(proc.pid, sig);
    });
  }
}
